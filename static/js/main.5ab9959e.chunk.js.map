{"version":3,"sources":["serviceWorker.ts","reducers/index.ts","actions/types.ts","configureStore.ts","components/IntroPage.tsx","components/SelectPlanet.tsx","components/Selection.tsx","actions/thunkActions.ts","actions/index.ts","components/FinishPage.tsx","components/App.tsx","index.tsx","components/Logo.png"],"names":["Boolean","window","location","hostname","match","combineReducers","planet","state","action","type","payload","vehicle","token","result","time","configureStore","createStore","reducer","applyMiddleware","thunk","IntroPage","className","src","logo","alt","to","radioStyle","display","height","lineHeight","Option","Select","SelectPlanet","props","allPlanets","useSelector","allVehicles","index","onChange","value","onSelectPlanetChange","console","log","list","filter","planets","name","includes","map","data","listOptionsInComponent","undefined","Group","String","handleRadioChange","distance","planetsArray","max_distance","total_no","style","disabled","listVehiclesAt","Header","Layout","Content","Footer","Selection","tokens","dispatch","useDispatch","useState","planetArray","setArray","selectedVehicle","setVehicle","vehicleArray","setVehicleArray","setTime","selectedPlanetsArray","setSelectedPlanetsArray","useEffect","a","fetch","headers","Accept","method","then","response","json","tokenFetch","planetFetch","vehicleFetch","calculateTime","previousOption","optionSelected","prevTimeIndex","e","indexOf","prevTime","speed","indexTime","indextime","onSelectChange","currentIndex","selectedPlanet","planetDistance","vehicleOnChangeinSelectPlanet","target","allSelectedPlanets","Number","prevOption","indexOfVehicle","indexOfVehicle2","padding","length","onClick","tokenValue","Object","values","selectedData","body","JSON","stringify","fetchResult","GetResultFromApi","planet_names","vehicle_names","textAlign","FinishPage","status","planet_name","App","path","exact","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.5ab9959e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport { ReduxActions } from '../actions';\nimport * as actionTypes from '../actions/types';\nimport {\n  Planet, Vehicle, Result,\n} from '../types/types';\n\nexport type State = {\n  planet:Planet[];\n  vehicle:Vehicle[];\n  token:string;\n  result:Result;\n  time:number\n};\n\nexport default combineReducers<State, ReduxActions>({\n  planet: (state = [], action) => {\n    switch (action.type) {\n      case actionTypes.SET_PLANET_TO_STORE:\n        return action.payload;\n      default:\n        return state;\n    }\n  },\n  vehicle: (state = [], action) => {\n    switch (action.type) {\n      case actionTypes.SET_VEHICLES_TO_STORE:\n        return action.payload;\n      default:\n        return state;\n    }\n  },\n  token: (state = '', action) => {\n    switch (action.type) {\n      case actionTypes.GET_TOKEN:\n        return action.payload;\n      default:\n        return state;\n    }\n  },\n  result: (state = {}, action) => {\n    switch (action.type) {\n      case actionTypes.FIND_FALCON:\n        return action.payload;\n      default:\n        return state;\n    }\n  },\n  time: (state = 0, action) => {\n    switch (action.type) {\n      case actionTypes.TIME_TAKEN:\n        return action.payload;\n      default:\n        return state;\n    }\n  },\n\n});\n","\nexport const SET_PLANET_TO_STORE = 'SET_PLANET_TO_STORE';\nexport type SET_PLANET_TO_STORE = typeof SET_PLANET_TO_STORE;\n\nexport const SET_VEHICLES_TO_STORE = 'SET_VEHICLES_TO_STORE';\nexport type SET_VEHICLES_TO_STORE = typeof SET_VEHICLES_TO_STORE;\n\nexport const GET_TOKEN = 'GET_TOKEN';\nexport type GET_TOKEN = typeof GET_TOKEN;\n\nexport const FIND_FALCON = 'FIND_FALCON';\nexport type FIND_FALCON = typeof FIND_FALCON;\n\nexport const TIME_TAKEN = 'TIME_TAKEN';\nexport type TIME_TAKEN = typeof TIME_TAKEN;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport reducer from './reducers';\n// import * as actions from \"./actions\";\n\n\nconst configureStore = () => {\n  const store = createStore(reducer, applyMiddleware(thunk));\n  return store;\n};\n\nexport default configureStore();\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\nimport {\n  Button,\n} from 'antd';\nimport Selection from './Selection';\n\nimport './IntroPage.css';\nimport logo from './Logo.png';\n\nfunction IntroPage() {\n  return (\n\n    <div className=\"falcon-intro-main\">\n      <div className=\"row \">\n        <div className=\"col-12 falcon-intro-main-col justify-content-center\">\n          <img className=\"falcone-intro-main-logo\" src={logo} alt=\"falcone-logo\" />\n          <h1 className=\"falcone-intro-main-head\">FINDING FALCONE</h1>\n          <p className=\"falcone-intro-main-subtext\">King Shan received intelligence that Al Falcone is in hiding in one of these 6 planets.Donlon,Enchai,Jebing,Sapir,Lerbin & Pingasor.However he has limited resources at his disposal & can send his army to only 4 of these planets.</p>\n          <h4 className=\"falcone-intro-main-sub\">HELP HIM TO FIND FALCONE</h4>\n          <div className=\"d-flex justify-content-center\">\n            <Button type=\"primary\">\n              <Link to=\"/FindFalcone\">START</Link>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  );\n}\nexport default IntroPage;\n","import React, { useState, ReactNode } from 'react';\nimport { Select, Radio } from 'antd';\nimport { useSelector } from 'react-redux';\nimport { RadioChangeEvent } from 'antd/lib/radio/interface';\nimport { State } from '../reducers';\nimport { Planet } from '../types/types';\n\nimport './SelectedPlanets.css';\n\ninterface MyProps {\n  index: number;\n  onSelectPlanetChange(value: string, index: number): void;\n  planets: string[];\n  planetsArray:Planet[];\n  handleRadioChange(e: RadioChangeEvent):void;\n}\nconst radioStyle = {\n  display: 'block',\n  height: '30px',\n  lineHeight: '30px',\n};\n\nconst { Option } = Select;\nconst SelectPlanet: React.FunctionComponent<MyProps> = (props) => {\n  const allPlanets = useSelector((state: State) => state.planet);\n  const allVehicles = useSelector((state: State) => state.vehicle);\n\n  function handleChange(value: string) {\n    props.onSelectPlanetChange(value, props.index);\n    console.log(`selected ${value}`);\n  }\n  const listOptionsInComponent = () => {\n    const planetList = allPlanets.filter(\n      (planet) => props.planets[props.index] === planet.name\n        || !props.planets.includes(planet.name),\n    );\n    const list = planetList.map((data, index) => (\n      <Option value={data.name}>{data.name}</Option>\n    ));\n    console.log('options', list);\n\n    return list;\n  };\n  const listVehiclesAt = (value:number) => {\n    const { distance } = props.planetsArray[value];\n\n    // const vehicleList = allVehicles.filter(\n    //   (vehicle) => vehicle.max_distance >= distance,\n    // );\n    const vehicleOptions = allVehicles.map((vehicle) => (\n      vehicle.max_distance >= distance && vehicle.total_no > 0 ? (\n        <Radio style={radioStyle} value={vehicle.name}>\n          {vehicle.name}\n          (\n          {vehicle.total_no}\n          )\n        </Radio>\n      )\n        : (\n          <Radio style={radioStyle} value={vehicle.name} disabled>\n            {vehicle.name}\n            (\n            {vehicle.total_no}\n            )\n          </Radio>\n        )\n    ));\n    return vehicleOptions;\n  };\n\n  const listVehicles = () => {\n    const vehicleOptions = allVehicles.map((vehicle) => (\n      <>\n        <Radio style={radioStyle} value={vehicle.name} disabled>\n          {vehicle.name}\n          (\n          {vehicle.total_no}\n          )\n        </Radio>\n      </>\n    ));\n    return vehicleOptions;\n  };\n\n\n  return (\n    <div>\n      <h5 className=\"falcone-planet-h5\">\n        Planet\n        {' '}\n        {props.index + 1}\n        {' '}\n      </h5>\n      <h6 className=\"falcone-selectPlanets\">Select the planet </h6>\n      <Select onChange={handleChange}>{listOptionsInComponent()}</Select>\n      <div>\n\n        {props.planets[props.index] === undefined ? '' : (\n          <>\n            <h6 className=\"falcone-selectSpaceShip\">Select the space ship </h6>\n            <Radio.Group name={String(props.index)} onChange={props.handleRadioChange}>\n              {' '}\n              {listVehiclesAt(props.index)}\n            </Radio.Group>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default SelectPlanet;\n","import React, { useEffect, useState, ChangeEvent } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Select, Radio, Layout, Button, Skeleton,\n} from 'antd';\nimport { RadioChangeEvent } from 'antd/lib/radio/interface';\nimport { Link } from 'react-router-dom';\nimport {\n  planetsApi,\n  VehiclesApi,\n  GetTokenFromApi,\n  GetResultFromApi,\n} from '../actions/thunkActions';\n\nimport logo from './Logo.png';\nimport './App.css';\nimport { State } from '../reducers';\nimport { Planet, Vehicle, FalconeData } from '../types/types';\nimport SelectPlanet from './SelectPlanet';\nimport * as actions from '../actions';\n\nconst { Header, Content, Footer } = Layout;\nconst { Option } = Select;\n\nconst radioStyle = {\n  display: 'block',\n  height: '30px',\n  lineHeight: '30px',\n};\nconst Selection = () => {\n  // const message = useSelector((state: State) => state.message);\n  // const id = useSelector((state: State) => state.id);\n  const allPlanets = useSelector((state: State) => state.planet);\n  const allVehicles = useSelector((state: State) => state.vehicle);\n  const tokens = useSelector((state: State) => state.token);\n  const dispatch = useDispatch();\n\n  const [planetArray, setArray] = useState<Planet[]>([]);\n  const [selectedVehicle, setVehicle] = useState<Array<string>>([]);\n  const [vehicleArray, setVehicleArray] = useState<Vehicle[]>([]);\n  const [time, setTime] = useState<number>(0);\n  const [selectedPlanetsArray, setSelectedPlanetsArray] = useState<string[]>(\n    [],\n  );\n\n  useEffect(() => {\n    dispatch(GetTokenFromApi());\n    dispatch(planetsApi());\n    dispatch(VehiclesApi());\n  }, []);\n\n  const vehicleOnChange = (e: RadioChangeEvent) => {\n    const optionSelected = e.target.value;\n    const allSelectedPlanets = allVehicles.filter(\n      (vehicle) => vehicle.name === optionSelected,\n    );\n    const currentIndex = Number(e.target.name);\n    vehicleArray[currentIndex] = allSelectedPlanets[0];\n    setVehicleArray([...vehicleArray]);\n    console.log('selected Vehicles ::', vehicleArray);\n    const prevOption = selectedVehicle[currentIndex];\n    selectedVehicle[currentIndex] = optionSelected;\n    setVehicle([...selectedVehicle]);\n    calculateTime(currentIndex, prevOption, optionSelected);\n    if (prevOption != optionSelected && prevOption != undefined) {\n      const indexOfVehicle = allVehicles.map((e) => e.name).indexOf(prevOption);\n      allVehicles[indexOfVehicle].total_no = allVehicles[indexOfVehicle].total_no + 1;\n      const indexOfVehicle2 = allVehicles\n        .map((e) => e.name)\n        .indexOf(optionSelected);\n      allVehicles[indexOfVehicle2].total_no = allVehicles[indexOfVehicle2].total_no - 1;\n    } else {\n      const indexOfVehicle = allVehicles\n        .map((e) => e.name)\n        .indexOf(optionSelected);\n      allVehicles[indexOfVehicle].total_no = allVehicles[indexOfVehicle].total_no - 1;\n    }\n  };\n  const calculateTime = (\n    index: number,\n    previousOption: string,\n    optionSelected: string,\n  ) => {\n    if (optionSelected !== previousOption && previousOption !== undefined) {\n      const prevTimeIndex = allVehicles\n        .map((e) => e.name)\n        .indexOf(previousOption);\n      const prevTime = planetArray[index].distance / allVehicles[prevTimeIndex].speed;\n      const indexTime = time\n        + planetArray[index].distance / vehicleArray[index].speed\n        - prevTime;\n      setTime(indexTime);\n    } else {\n      const indextime = time + planetArray[index].distance / vehicleArray[index].speed;\n      setTime(indextime);\n    }\n  };\n\n  const findFalcone = () => {\n    const tokenValue = String(Object.values(tokens));\n    const selectedData = {\n      token: tokenValue,\n      planet_names: selectedPlanetsArray,\n      vehicle_names: selectedVehicle,\n    };\n\n    dispatch(GetResultFromApi(selectedData));\n    dispatch(actions.getTime(time));\n    console.log('TIME TAKEN ::', time);\n  };\n  const onSelectChange = (value: string, currentIndex: number) => {\n    const selectedPlanet = value;\n    const planetDistance = allPlanets.filter(\n      (planet) => planet.name === selectedPlanet,\n    );\n    const index = currentIndex;\n    planetArray[index] = planetDistance[0];\n    setArray([...planetArray]);\n    selectedPlanetsArray[index] = selectedPlanet;\n    setSelectedPlanetsArray([...selectedPlanetsArray]);\n    console.log('parent Componet ::', value, selectedPlanetsArray);\n  };\n\n  const vehicleOnChangeinSelectPlanet = (e: RadioChangeEvent) => {\n    const optionSelected = e.target.value;\n    const allSelectedPlanets = allVehicles.filter(\n      (vehicle) => vehicle.name === optionSelected,\n    );\n    const currentIndex = Number(e.target.name);\n    vehicleArray[currentIndex] = allSelectedPlanets[0];\n    setVehicleArray([...vehicleArray]);\n    console.log('selected Vehicles ::', vehicleArray);\n    const prevOption = selectedVehicle[currentIndex];\n    selectedVehicle[currentIndex] = optionSelected;\n    setVehicle([...selectedVehicle]);\n    calculateTime(currentIndex, prevOption, optionSelected);\n    if (prevOption != optionSelected && prevOption != undefined) {\n      const indexOfVehicle = allVehicles.map((e) => e.name).indexOf(prevOption);\n      allVehicles[indexOfVehicle].total_no = allVehicles[indexOfVehicle].total_no + 1;\n      const indexOfVehicle2 = allVehicles\n        .map((e) => e.name)\n        .indexOf(optionSelected);\n      allVehicles[indexOfVehicle2].total_no = allVehicles[indexOfVehicle2].total_no - 1;\n    } else {\n      const indexOfVehicle = allVehicles\n        .map((e) => e.name)\n        .indexOf(optionSelected);\n      allVehicles[indexOfVehicle].total_no = allVehicles[indexOfVehicle].total_no - 1;\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"falcone-main-layout\">\n\n        <Layout className=\"layout \">\n          <Header>\n            <div className=\"logo\">\n              <img className=\"falcone-logo\" src={logo} alt=\"falcone-logo\" />\n              <h2 className=\"finding-falcone\">FINDING FALCONE</h2>\n              <p className=\"finding-falcone-restart float-right\">\n                <Link className=\"finding-falcone-restart-link\" to=\"/\">\n                  RESTART\n                </Link>\n              </p>\n            </div>\n          </Header>\n          <Content style={{ padding: '0 50px' }}>\n            <div className=\"site-layout-content falcone-row-primary\">\n              <h5 className=\"falcone-text text-center\">\n                Select 4 planets and the space vehicles to search in these\n                planets\n              </h5>\n              <p className=\"float-left\">\n                TIME TAKEN:\n                {time}\n              </p>\n              <br />\n              <br />\n              <div className=\"row\">\n                <div className=\"col\">\n                  <SelectPlanet\n                    index={0}\n                    onSelectPlanetChange={onSelectChange}\n                    planets={selectedPlanetsArray}\n                    planetsArray={planetArray}\n                    handleRadioChange={vehicleOnChangeinSelectPlanet}\n                  />\n                </div>\n                <div className=\"col falcone-col\">\n                  <SelectPlanet\n                    index={1}\n                    onSelectPlanetChange={onSelectChange}\n                    planets={selectedPlanetsArray}\n                    planetsArray={planetArray}\n                    handleRadioChange={vehicleOnChangeinSelectPlanet}\n                  />\n                </div>\n                <div className=\"col\">\n                  <SelectPlanet\n                    index={2}\n                    onSelectPlanetChange={onSelectChange}\n                    planets={selectedPlanetsArray}\n                    planetsArray={planetArray}\n                    handleRadioChange={vehicleOnChangeinSelectPlanet}\n                  />\n                </div>\n                <div className=\"col\">\n                  <SelectPlanet\n                    index={3}\n                    onSelectPlanetChange={onSelectChange}\n                    planets={selectedPlanetsArray}\n                    planetsArray={planetArray}\n                    handleRadioChange={vehicleOnChangeinSelectPlanet}\n                  />\n                </div>\n              </div>\n              {selectedVehicle.filter((value) => value !== undefined).length\n              !== 4 ? (\n                  ''\n                ) : (\n                  <>\n                    <div className=\"d-flex justify-content-center\">\n                      <Button type=\"primary\" onClick={findFalcone}>\n                        <Link to=\"/FindFalcon/result\"> FIND FALCONE</Link>\n                      </Button>\n                    </div>\n                  </>\n                )}\n            </div>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>Created for GeekTrust</Footer>\n        </Layout>\n      </div>\n    </div>\n  );\n};\nexport default Selection;\n","import { Action } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\n\nimport * as actions from './index';\nimport { State } from '../reducers';\nimport {\n  Planet, Vehicle, Result,\n} from '../types/types';\n\n\nexport const planetsApi = (\n): ThunkAction<void, State, unknown, Action<string>> => async (dispatch) => {\n  const planetFetch:Planet[] = await fetch('https://findfalcone.herokuapp.com/planets')\n    .then((response) => response.json());\n\n  console.log(planetFetch);\n  dispatch(actions.fetchPlanets(planetFetch));\n};\n\nexport const VehiclesApi = (\n):ThunkAction<void, State, unknown, Action<string>> => async (dispatch) => {\n  const vehicleFetch:Vehicle[] = await fetch('https://findfalcone.herokuapp.com/vehicles')\n    .then((response) => response.json());\n  dispatch(actions.fetchVehicles(vehicleFetch));\n};\n\nexport const GetTokenFromApi = (\n):ThunkAction<void, State, unknown, Action<string>> => async (dispatch) => {\n  const tokenFetch:string = await fetch('https://findfalcone.herokuapp.com/token', { headers: { Accept: 'application/json' }, method: 'POST' })\n    .then((response) => response.json());\n  console.log(tokenFetch);\n  dispatch(actions.getToken(tokenFetch));\n};\n\nexport const GetResultFromApi = (\n  selectedData:object,\n):ThunkAction<void, State, unknown, Action<string>> => async (dispatch) => {\n  console.log('SelectedConsole:::', selectedData);\n  const fetchResult:Result = await fetch('https://findfalcone.herokuapp.com/find',\n    {\n      method: 'POST',\n      headers: { Accept: 'application/json', 'Content-Type': 'application/json' },\n      body: JSON.stringify(selectedData),\n    })\n    .then((response) => response.json());\n  console.log(fetchResult);\n  dispatch(actions.getResult(fetchResult));\n};\n","import * as actionTypes from './types';\nimport {\n  Planet, Vehicle, Result,\n} from '../types/types';\n\n\ntype FetchPlanets = {\n  type:actionTypes.SET_PLANET_TO_STORE;\n  payload:Planet[];\n};\nexport const fetchPlanets = (payload:Planet[]):FetchPlanets => ({\n  type: actionTypes.SET_PLANET_TO_STORE,\n  payload,\n});\n\ntype FetchVehicles = {\n  type:actionTypes.SET_VEHICLES_TO_STORE;\n  payload:Vehicle[];\n};\nexport const fetchVehicles = (payload:Vehicle[]):FetchVehicles => ({\n  type: actionTypes.SET_VEHICLES_TO_STORE,\n  payload,\n});\n\ntype GetToken ={\n  type:actionTypes.GET_TOKEN;\n  payload:string;\n};\nexport const getToken = (payload:string):GetToken => ({\n  type: actionTypes.GET_TOKEN,\n  payload,\n});\ntype GetResult ={\n  type:actionTypes.FIND_FALCON;\n  payload:Result;\n};\nexport const getResult = (payload:Result):GetResult => ({\n  type: actionTypes.FIND_FALCON,\n  payload,\n});\ntype GetTime ={\n  type:actionTypes.TIME_TAKEN;\n  payload:number;\n};\nexport const getTime = (payload:number):GetTime => ({\n  type: actionTypes.TIME_TAKEN,\n  payload,\n});\n\n\nexport type ReduxActions = FetchPlanets | FetchVehicles | GetToken | GetResult | GetTime;\n\n// export * from \"./thunkActions\"\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport {\n  Layout, Button,\n} from 'antd';\n\n\nimport './FinishPage.css';\nimport logo from './Logo.png';\n\nimport { State } from '../reducers';\n\n\nconst { Header, Content, Footer } = Layout;\n\nconst FinishPage = () => {\n  const result = useSelector((state: State) => state.result);\n  const time = useSelector((state: State) => state.time);\n\n  return (\n    <div>\n      <div className=\"falcon-finish-main\">\n        <Layout className=\"layout \">\n          <Header>\n            <div className=\"logo\">\n              <img className=\"falcone-logo\" src={logo} alt=\"falcone-logo\" />\n              <h2 className=\"finding-falcone\">FINDING FALCONE</h2>\n              <p className=\"finding-falcone-restart float-right\">\n                <Link className=\"finding-falcone-restart-link\" to=\"/\">\n                  RESTART\n                </Link>\n              </p>\n            </div>\n          </Header>\n          <Content style={{ padding: '0 50px' }}>\n            <div className=\"row\">\n              <div className=\"col falcon-finish-col\">\n                <h2 className=\"falcon-finish-status\">\n                  {result.status}\n                  !\n                </h2>\n                {result.status === 'success' ? (\n                  <div>\n                    <h6 className=\"falcon-finish-congrats\">\n                      Congratulations on finding falcone.King Shan is mightly\n                      pleased.\n                    </h6>\n                    {' '}\n                    <h5 className=\"falcon-data pt-3\">\n                      PLANET FOUND:\n                      <b>\n                        {' '}\n                        {result.planet_name}\n                      </b>\n                    </h5>\n                    <h5 className=\"falcon-data\">\n                      TIME TAKEN:\n                      <b>\n                        {' '}\n                        {time}\n                      </b>\n                    </h5>\n                  </div>\n                ) : ''}\n                {\n                  result.status === 'false' ? (\n                    <h6 className=\"falcon-finish-congrats\">\n                      Oops AI Falcone is not there !!\n                    </h6>\n                  ) : ''\n                }\n                <Button type=\"primary\">\n                  <Link to=\"/\">START AGAIN</Link>\n                </Button>\n              </div>\n            </div>\n          </Content>\n          <Footer style={{ textAlign: 'center' }}>Created for GeekTrust</Footer>\n        </Layout>\n      </div>\n    </div>\n  );\n};\nexport default FinishPage;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport IntroPage from './IntroPage';\nimport Selection from './Selection';\nimport FinishPage from './FinishPage';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App-main\">\n\n        <Switch>\n          <Route path=\"/\">\n            <IntroPage />\n          </Route>\n          <Route path=\"/FindFalcone\" exact>\n            <Selection />\n          </Route>\n          <Route path=\"/FindFalcon/result\">\n            <FinishPage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './configureStore';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Logo.7e244568.png\";"],"sourceRoot":""}